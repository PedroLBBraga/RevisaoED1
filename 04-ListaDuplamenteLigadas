#include <stdio.h>
#include <stdlib.h>

// Definição da estrutura de um nó da lista duplamente ligada
typedef struct Node {
    int data;            // Dados do nó (valor armazenado)
    struct Node* next;   // Ponteiro para o próximo nó
    struct Node* prev;   // Ponteiro para o nó anterior
} Node;

// Ponteiro global para o primeiro nó (cabeça) da lista
Node* head = NULL;

// Função para inserir um novo nó no início da lista
void insertFront(int value) {
    // Aloca memória para o novo nó
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = value;  // Atribui o valor ao novo nó
    newNode->next = head;   // Faz o próximo do novo nó apontar para o atual primeiro nó
    newNode->prev = NULL;   // Como é o primeiro nó, não tem nó anterior
    
    // Se a lista não estiver vazia, ajusta o ponteiro 'prev' do antigo primeiro nó
    if (head != NULL)
        head->prev = newNode;
    
    head = newNode;  // Atualiza o ponteiro cabeça para o novo nó
}

// Função para deletar um nó específico da lista
void deleteNode(Node* node) {
    if (node == head)  // Se o nó a ser deletado for o primeiro, atualiza a cabeça
        head = node->next;
    
    if (node->next != NULL)  // Ajusta o ponteiro 'prev' do próximo nó, se existir
        node->next->prev = node->prev;
    
    if (node->prev != NULL)  // Ajusta o ponteiro 'next' do nó anterior, se existir
        node->prev->next = node->next;
    
    free(node);  // Libera a memória do nó deletado
}

// Função para imprimir todos os elementos da lista
void printList() {
    Node* temp = head;  // Começa do primeiro nó
    while (temp != NULL) {  // Percorre a lista até o final
        printf("%d ", temp->data);  // Imprime o dado do nó atual
        temp = temp->next;  // Vai para o próximo nó
    }
    printf("\n");
}

// Função para buscar um valor específico na lista
void buscar(int valor) {
    Node* temp = head;  // Começa do primeiro nó
    while (temp != NULL) {  // Percorre a lista
        if (temp->data == valor) {  // Se encontrar o valor
            printf("Valor %d encontrado.\n", valor);
            if (temp->prev != NULL)
                printf("Anterior: %d\n", temp->prev->data);
            else
                printf("Anterior: NULL\n");
            
            if (temp->next != NULL)
                printf("Próximo: %d\n", temp->next->data);
            else
                printf("Próximo: NULL\n");
            return;
        }
        temp = temp->next;  // Vai para o próximo nó
    }
    printf("Valor %d não encontrado na lista.\n", valor);
}

int main() {
    int opcao, valor;

    while (1) {
        printf("\n1. Inserir\n2. Imprimir\n3. Buscar\n4. Sair\nEscolha uma opção: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                printf("Digite o valor para inserir: ");
                scanf("%d", &valor);
                insertFront(valor);
                break;
            case 2:
                printList();
                break;
            case 3:
                printf("Digite o valor para buscar: ");
                scanf("%d", &valor);
                buscar(valor);
                break;
            case 4:
                exit(0);
            default:
                printf("Opção inválida!\n");
        }
    }

    return 0;
}
