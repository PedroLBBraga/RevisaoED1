#include <stdio.h>
#include <stdlib.h>

// Estrutura que representa um nó na fila
typedef struct Node {
    int data;          // Dado armazenado no nó
    struct Node* next; // Ponteiro para o próximo nó na fila
} Node;

// Estrutura que representa a fila
typedef struct Queue {
    Node* front; // Ponteiro para o nó na frente da fila
    Node* rear;  // Ponteiro para o nó na parte traseira da fila
} Queue;

// Função para criar uma nova fila e inicializá-la
Queue* createQueue() {
    Queue* q = (Queue*)malloc(sizeof(Queue)); // Aloca memória para a fila
    if (q == NULL) { // Verifica se a alocação de memória foi bem-sucedida
        printf("Falha na alocação de memória para a fila.\n");
        return NULL;
    }
    q->front = q->rear = NULL; // Inicializa os ponteiros front e rear como NULL
    return q; // Retorna o ponteiro para a fila criada
}

// Função para enfileirar (inserir) um elemento na fila
void enqueue(Queue* q, int value) {
    Node* newNode = (Node*)malloc(sizeof(Node)); // Aloca memória para um novo nó
    if (newNode == NULL) { // Verifica se a alocação de memória foi bem-sucedida
        printf("Falha na alocação de memória para o novo nó.\n");
        return;
    }
    newNode->data = value; // Atribui o valor ao campo data do novo nó
    newNode->next = NULL; // Define o campo next como NULL (último nó da fila)
    
    if (q->rear == NULL) { // Se a fila está vazia
        q->front = q->rear = newNode; // O novo nó é tanto o front quanto o rear
    } else { 
        q->rear->next = newNode; // Adiciona o novo nó após o último nó existente
        q->rear = newNode; // Atualiza o ponteiro rear para o novo nó
    }
}

// Função para desenfileirar (remover) um elemento da fila
int dequeue(Queue* q) {
    if (q->front == NULL) { // Verifica se a fila está vazia
        printf("Fila está vazia.\n");
        return -1; // Retorna -1 para indicar que a fila está vazia
    }
    Node* temp = q->front; // Armazena o nó da frente para liberar depois
    int data = temp->data; // Armazena o dado do nó da frente
    q->front = q->front->next; // Move o ponteiro front para o próximo nó
    if (q->front == NULL) { // Se a fila ficou vazia após a remoção
        q->rear = NULL; // Também define o rear como NULL
    }
    free(temp); // Libera a memória do nó removido
    return data; // Retorna o dado do nó removido
}

// Função para verificar se a fila está vazia
int isEmpty(Queue* q) {
    return q->front == NULL; // Retorna 1 (true) se a fila estiver vazia, 0 (false) caso contrário
}

// Função para imprimir todos os elementos da fila
void printQueue(Queue* q) {
    if (isEmpty(q)) { // Verifica se a fila está vazia
        printf("A fila está vazia.\n");
        return;
    }
    Node* temp = q->front; // Começa no nó da frente
    printf("Elementos da fila: ");
    while (temp != NULL) { // Percorre todos os nós na fila
        printf("%d ", temp->data); // Imprime o dado de cada nó
        temp = temp->next; // Avança para o próximo nó
    }
    printf("\n");
}

// Função para contar o número de elementos na fila
int countElements(Queue* q) {
    int count = 0; // Inicializa o contador
    Node* temp = q->front; // Começa no nó da frente
    while (temp != NULL) { // Percorre todos os nós na fila
        count++; // Incrementa o contador para cada nó
        temp = temp->next; // Avança para o próximo nó
    }
    return count; // Retorna o número de elementos na fila
}

// Função para limpar a fila, liberando toda a memória alocada
void clearQueue(Queue* q) {
    while (!isEmpty(q)) { // Enquanto a fila não estiver vazia
        dequeue(q); // Remove e libera cada nó da fila
    }
    printf("Fila limpa.\n");
}

// Função principal para testar as operações da fila
int main() {
    Queue* q = createQueue(); // Cria uma nova fila

    // Insere elementos na fila
    enqueue(q, 10);
    enqueue(q, 20);
    enqueue(q, 30);

    // Imprime os elementos da fila
    printQueue(q);

    // Conta e exibe o número de elementos na fila
    printf("Número de elementos na fila: %d\n", countElements(q));

    // Remove elementos da fila
    printf("Desenfileirado: %d\n", dequeue(q));
    printQueue(q);

    // Limpa a fila e libera a memória
    clearQueue(q);

    // Exibe o estado da fila após a limpeza
    printQueue(q);

    free(q); // Libera a memória alocada para a estrutura da fila
    return 0;
}
